(()=>{"use strict";const e=e=>{let t=e,s=!1,r="",o=()=>s;return{setOwner:(e="x||o")=>0==o()&&(((e=!1)=>{s=e})(!0),r=e,!0),getIsOwn:o,getOwner:()=>r,getPos:()=>t,reset:()=>{s=!1,r=""}}},t=(e,t)=>{let s=e,r=(()=>{let e={A:[],B:[],C:[]};return{getTitles:()=>e,setTitle:(t="")=>{let s=t.split(""),r=s[0].toUpperCase();e[r].push(s[0]+s[1]),e[r].length>1&&((t="")=>{let s=[];s=e[t];let r="";for(let e=0;e<s.length;e++)for(let t=0;t<s.length;t++){let o=e=>s[e].split("")[1];o(e)<o(t)&&(r=s[t],s[t]=s[e],s[e]=r)}})(r)},reset:()=>{Object.keys(e).forEach((t=>{e[t]=[]}))}}})(),o={requestTitle:`request_title_${s}`,reqTitleResponse:`request_title_resp_${s}`,reqTitlesOwned:`submit_titles_owned_${s}`,reset:"reset"},n=(e={resp:!0,pos:"a0"})=>{let s=e.resp,n=e.pos;1==s&&r.setTitle(n),t.publish(o.reqTitlesOwned,r.getTitles())};return t.subscribe(o.reqTitleResponse,n),t.subscribe(o.reset,r.reset),{setTitel:n,requestTitle:(e="A",r=0)=>{const n={Group:e,Pos:r,Owner:s};t.publish(o.requestTitle,n)},getTitles:r.getTitles,reset:r.reset}};window.pubSub=(()=>{let e={};return{publish:(t,s)=>{switch(e[t]){case null==e[t]:console.log(` PubSub : ${t}  does not exsist`);break;case 0==e[t].lenght:console.log(` PubSub : ${t} does'n have any callback-fn`);break;default:e[t].forEach((e=>{e(s)}))}},subscribe:(t,s)=>{null==e[t]&&(e[t]=[]),e[t].push(s)},emit:t=>{null==e[t]?console.log(`PubSub : ${t} does not exist`):e[t].forEach((e=>{e()}))},events:e}})(),window.board=(t=>{let s={A:[e("a0"),e("a1"),e("a2")],B:[e("b0"),e("b1"),e("b2")],C:[e("c0"),e("c1"),e("c2")]},r=(()=>{let e=1,t=1,s={x:0,o:0,draw:0};return{setWinner:(e="draw")=>{s[e]+=1},reset:()=>{e=1,Object.keys(s).forEach((e=>{s[e]=0}))},setRound:()=>{e++},getData:()=>(console.log(`Results : Round#${e}`),console.log(`x : ${s.x} , o : ${s.o} , draws : ${s.draw}`),s),setTurn:()=>{t++,3==t&&(t=1)},getTurn:()=>t}})(),o=e=>`request_title_${e}`,n=e=>`request_title_resp_${e}`,l=e=>`submit_titles_owned_${e}`,u={check:e=>{if(null!=typeof e)return 1==(e=>{let t=(e,t)=>{let s=[],r=0,o=["a","b","c"].map((e=>e+t)),n=0;return Object.keys(e).forEach((r=>{o[n]==e[r][t]?s.push(!0):s.push(!1),n+=1})),s.forEach((e=>{1==e&&(r+=1)})),3==r};return 1==t(e,0)||1==t(e,1)||1==t(e,2)})(e)||1==(e=>{let t=(e,t)=>{let s=[],r=!1,o=[0,1,2].map((e=>t.toLowerCase()+e)),n=0;return o.forEach((r=>{r==e[t][n]?s.push(!0):s.push(!1),n+=1})),s.forEach((e=>{r=0!=e})),r};return 1==t(e,"A")||1==t(e,"B")||1==t(e,"C")})(e)||1==(e=>{let t=(e,t)=>{let s=0;return Object.keys(e).forEach((r=>{e[r].forEach((e=>{e==t[r]&&(s+=1)}))})),3==s};return 1==t(e,{A:"a0",B:"b1",C:"c2"})||1==t(e,{A:"a2",B:"b1",C:"c0"})})(e);console.log("pattern can't be performed over an undefined object")}},c=()=>{Object.keys(s).forEach((e=>{s[e].forEach((e=>{e.reset()}))}))},i=e=>{switch(!0){case 1==r.getTurn()&&"x"==e.Owner:case 2==r.getTurn()&&"o"==e.Owner:((e={Group:"",Pos:0,Owner:""})=>{let r={};r=s[e.Group];let o=r[e.Pos],l=o.setOwner(e.Owner);0==l?(console.log(`${o.getPos()} is owned by ${o.getOwner()}`),t.publish(n(e.Owner),{resp:!1,pos:o.getPos()})):1==l&&(console.log(`${o.getPos()} was take by ${o.getOwner()}`),t.publish(n(e.Owner),{resp:!0,pos:o.getPos()}))})(e),r.setTurn();break;default:console.log("not your turn")}};t.subscribe(o("x"),i),t.subscribe(o("o"),i),t.subscribe(l("x"),(function(e){1==u.check(e)&&(console.log("x won round"),r.setWinner("x"),r.getData(),r.setRound(),c(),t.emit("reset"))})),t.subscribe(l("o"),(function(e){1==u.check(e)&&(console.log("o won round"),r.setWinner("o"),r.getData(),r.setRound(),c(),t.emit("reset"))}))})(pubSub),window.playerOne=t("x",pubSub),window.playerTwo=t("o",pubSub)})();